{"version":3,"sources":["presentations/presentations.js"],"names":[],"mappings":"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","file":"presentations/presentations.js","sourcesContent":["(function () {\n\n    'use strict';\n\n    angular.module('skykitDisplay.presentations')\n\n        .controller('MainPresentationsCtrl', [\n            '$scope',\n            '$rootScope',\n            '$timeout',\n            '$window',\n            'presentations',\n            '$mdBottomSheet',\n            '$state',\n            'config',\n            'ResourceService',\n            '$mdDialog',\n            function ($scope, $rootScope, $timeout, $window, presentations, $mdBottomSheet, $state, config, ResourceService, $mdDialog) {\n\n                $scope.presentations = presentations || [];\n                $scope.config = config;\n                $scope.alertMsg = '';\n\n                $scope.list = {\n                    itemsSynching: [],\n                    currentPage: 1,\n                    filters: {\n                        pageSize: '',\n                        name: ''\n                    },\n                    detailState: {\n                        active: false,\n                        itemId: '',\n                        publishing: false,\n                        synching: false,\n                        unsavedChanges: false,\n                        saving: false,\n                        published: false,\n                        fetchingImages: false,\n                        alertMsg: ''\n                    }\n                };\n\n                $scope.presentationsMetadata = [];\n\n\n                $scope.isActiveState = function (state, index) {\n                    return $state.includes(state, { presentationIdx: index });\n                };\n\n                $scope.setSynchingPresentation = function ($index) {\n                    $scope.list.itemsSynching.push($index);\n                };\n\n\n                $scope.togglePublishing = function () {\n                    $scope.list.detailState.publishing = !$scope.list.detailState.publishing;\n                };\n\n                $scope.toggleSynching = function () {\n                    $scope.list.detailState.synching = !$scope.list.detailState.synching;\n                };\n\n\n                $scope.setUnsaved = function () {\n                    $scope.list.detailState.unsavedChanges = true;\n                };\n\n                $scope.toggleSaving = function () {\n                    $scope.list.detailState.saving = !scope.list.detailState.saving;\n                };\n\n\n                /**\n                 * Handles clicks to a list item by toggling the `details` state\n                 * @param statePath The state to navigate to\n                 * @param itemId The id of the resource being passed into the next state\n                 */\n                $scope.toggleActiveState = function (statePath, presentation) {\n\n                    var presentationId = presentation.resource_id;\n                    var presentationIdx = $scope.presentations.indexOf(presentation);\n                    console.log(presentationIdx);\n\n\n                    if ($scope.isActiveState(config.VIEW_STATES.PRESENTATION_DETAILS, presentationIdx)) {\n                        // The user clicked the same item; we just need to close it and return to the \"list\" state.\n                        $scope.list.detailState.active = false;\n                        $scope.list.detailState.itemId = undefined;\n                        $state.go(config.VIEW_STATES.PRESENTATIONS_LIST);\n                    } else {\n                        // The user is trying to open a new item. We need to update the tracked position and\n                        // initiate a state change to its detail view\n                        $scope.list.detailState.acitve = true;\n                        $scope.list.detailState.itemId = presentationId;\n                        console.log(statePath);\n                        $state.go(statePath, { presentationIdx: presentationIdx });\n                    }\n                };\n\n\n                /**\n                 * Handle clicks to a presentation's refresh button.\n                 */\n                $scope.syncPresentation = function ($index, presentation) {\n\n                    $scope.toggleSynching();\n\n                    ResourceService.syncResource(presentation).then(function (newPresentation) {\n                        $scope.list.detailState.synching = false;\n                        $scope.presentations[$index] = newPresentation;\n                        $scope.list.itemsSynching[$scope.list.itemsSynching.indexOf($index)] = -1;\n                        $rootScope.$broadcast('presentation-synced', { presentation: newPresentation });\n                    }, function (error) {\n                        $scope.list.detailState.synching = false;\n                    });\n                };\n\n\n                /**\n                 * Open the resource's direct location in a new tab.\n                 */\n                $scope.openPresentationSource = function ($event, presentation) {\n\n                    // prevent propagation of the click event. Otherwise, it will\n                    // also be fired for the list item element. (And we just want the button here)\n                    $scope.stopProp($event);\n\n                    $window.open(presentation.edit_url);\n                };\n\n\n                /**\n                 * Handle clicks to the preview button by presenting a confirmation dialog,\n                 * which upon confirmation should launch a Chrome App preview of the presentation.\n                 */\n                $scope.launchPresentationPreview = function ($event, presentation) {\n\n                    $mdDialog.show({\n                        controller: 'PreviewDialogCtrl',\n                        templateUrl: 'static/app/presentations/previewDialog.html',\n                        targetEvent: $event\n                    })\n                        .then(function (confirmation) {\n                            // TODO: Launch preview for real here\n                            $scope.alertMsg = 'Launching Preview';\n                        }, function () {\n                            $scope.alertMsg = 'Preview Cancelled';\n                        }\n                    );\n                };\n\n                /**\n                 * Makes calls in the background to save a presentation when a user makes changes.\n                 *\n                 * @param checkUnsavedState boolean to indicate whether we need to verify that there\n                 *                          are unsaved changes. (Allows this function to be fired\n                 *                          on events where the existence of unsaved changes is ambiguous,\n                 *                          such as a slider mouseup)\n                 */\n                $scope.saveDraftPresentation = function (presentation, checkUnsavedState) {\n\n                    if (checkUnsavedState) {\n                        if (!$scope.list.detailState.unsavedChanges) {\n                            return;\n                        }\n                    }\n                    console.log(\"Saving presentation...\");\n                    console.log(presentation);\n                    $scope.list.detailState.saving = true;\n\n                    ResourceService.saveDraftResource(presentation).then(function (resp) {\n                        console.log(\"Save successful. Response...\");\n                        console.log(resp);\n                        $scope.list.detailState.unsavedChanges = false;\n                        $scope.list.detailState.saving = false;\n                        $scope.$broadcast('presentation-saved', { presentation: resp });\n                    }, function (resp) {\n                        $scope.list.detailState.saving = false;\n                        $scope.list.detailState.unsavedChanges = true;\n                        $scope.list.detailState.alertMsg = 'Unable to save changes at this time';\n                    });\n                };\n\n\n\n                /**\n                 * Handle clicks to the publish button by performing a publishing operation\n                 * for the item that was clicked.\n                 */\n                $scope.publish = function (presentation) {\n\n                    $scope.togglePublishing();\n\n                    ResourceService.publishDraftResource(presentation).then(function (success) {\n\n                        $scope.togglePublishing();\n                        $scope.list.detailState.published = true;\n                        $scope.list.detailState.unsavedChanges = false;\n                        console.log(\"Save Success\");\n                        $rootScope.$broadcast('presentation-published', { presentation: presentation });\n                    }, function (error) {\n                        $scope.togglePublishing();\n                        $scope.list.detailState.published = false;\n                        $scope.list.detailState.unSavedChanges = true;\n                    });\n                };\n\n\n                /**\n                 * Potential option for having an expandable sheet of option buttons\n                 * @param $event\n                 */\n                $scope.showGridBottomSheet = function ($event) {\n                    $scope.alertMsg = '';\n                    $mdBottomSheet.show({\n                        controller: 'GridBottomSheetCtrl',\n                        targetEvent: $event\n                    }).then(function (clickedItem) {\n                        $scope.alertMsg = clickedItem.name + ' clicked!';\n                    });\n                };\n\n\n                /**\n                 * Helper function that solves the tricky math behind finding the ACTUAL item index\n                 * we want when we get an `$index` value back from our paginated list.\n                 */\n                var getTrueItemPosition = function ($index) {\n                    if ($scope.list.currentPage > 1) {\n                        var lowerBound = $scope.list.currentPage * $scope.list.filters.pageSize - $scope.list.filters.pageSize;\n                        return lowerBound + $index;\n                    }\n                    return $index;\n                };\n\n                /**\n                 * Helper function to stop the propagation of click events on an item. This is used for click handlers\n                 * on UI elements that are layered atop other clickable elements whose handlers we don't want to trigger.\n                 * @param $event\n                 */\n                $scope.stopProp = function ($event) {\n                    $event.stopPropagation();\n                    $event.preventDefault();\n                };\n\n                /**\n                 * Stop propagation of event when space (32) or enter (13) is pressed\n                 */\n                $scope.interceptKeys = function ($event, $index) {\n                    console.log(\"Hello\");\n                    console.log($event);\n\n                    if ($event.which === 13) {\n                        $scope.saveDraftPresentation($scope.presentations[$index], false);\n                    } else if ($event.which === 32) {\n                        $event.stopPropagation();\n                        $event.preventDefault();\n                    }\n                };\n\n\n//                function createSamplePresentationCategories() {\n//                    for (var i = 0; i < $scope.presentations.length; i++) {\n//\n//                        if (i % 2 === 0) {\n//                            $scope.presentations[i].categories = [\n//                                {\n//                                    name: 'Customer Facing',\n//                                    iconClass: 'icon-user',\n//                                    iconTheme: 'orange'\n//                                },\n//                                {\n//                                    name: 'Advertising',\n//                                    iconClass: 'icon-user',\n//                                    iconTheme: 'red'\n//                                },\n//                                {\n//                                    name: 'Images',\n//                                    iconClass: 'icon-user',\n//                                    iconTheme: 'green'\n//                                },\n//                                {\n//                                    name: 'Videos',\n//                                    iconClass: 'icon-user',\n//                                    iconTheme: 'yellow'\n//                                }\n//                            ];\n//                        } else {\n//                            $scope.presentations[i].categories = [\n//                                {\n//                                    name: 'Employee Facing',\n//                                    iconClass: 'icon-user',\n//                                    iconTheme: 'primary'\n//                                },\n//                                {\n//                                    name: 'Safety',\n//                                    iconClass: 'icon-user',\n//                                    iconTheme: 'orange'\n//                                },\n//                                {\n//                                    name: 'Images',\n//                                    iconClass: 'icon-user',\n//                                    iconTheme: 'green'\n//                                }\n//                            ];\n//                        }\n//                    }\n//                };\n            }\n        ])\n        .controller('PreviewDialogCtrl', [\n            '$scope',\n            '$mdDialog',\n            function ($scope, $mdDialog) {\n                $scope.hide = function () {\n                    $mdDialog.hide();\n                };\n\n                $scope.cancel = function () {\n                    $mdDialog.cancel();\n                };\n\n                $scope.answer = function (answer) {\n                    $mdDialog.hide(answer);\n                };\n            }\n        ])\n        .controller('GridBottomSheetCtrl', [\n            '$scope',\n            '$mdBottomSheet',\n            function ($scope, $mdBottomSheet) {\n                $scope.items = [\n                    {\n                        name: 'Open in Google Slides',\n                        icon: 'static/images/ic_google_assets_24px.png',\n                        url: 'https://www.google.com'\n                    },\n                    {\n                        name: 'Open with Google Picker',\n                        icon: 'static/images/ic_google_picker_24px.png',\n                        url: 'https://www.google.com'\n\n                    },\n                    {\n                        name: 'Share Presentation',\n                        icon: 'static/images/ic_share_24px.png',\n                        url: 'https://www.google.com'\n                    }\n                ];\n\n                $scope.listItemClicked = function ($index) {\n                    var clickedItem = $scope.items[$index];\n                    $mdBottomSheet.hide(clickedItem);\n                };\n            }\n        ]);\n})();\n"],"sourceRoot":"/source/"}